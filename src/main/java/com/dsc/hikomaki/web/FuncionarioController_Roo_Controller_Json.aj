// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.dsc.hikomaki.web;

import com.dsc.hikomaki.domain.Funcionario;
import com.dsc.hikomaki.domain.Mesa;
import com.dsc.hikomaki.web.FuncionarioController;
import java.util.List;
import java.util.Set;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect FuncionarioController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> FuncionarioController.showJson(@PathVariable("id") Long id) {
        Funcionario funcionario = funcionarioService.findFuncionario(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (funcionario == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(funcionario.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> FuncionarioController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<Funcionario> result = funcionarioService.findAllFuncionarios();
        return new ResponseEntity<String>(Funcionario.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> FuncionarioController.createFromJson(@RequestBody String json) {
        Funcionario funcionario = Funcionario.fromJsonToFuncionario(json);
        funcionarioService.saveFuncionario(funcionario);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> FuncionarioController.createFromJsonArray(@RequestBody String json) {
        for (Funcionario funcionario: Funcionario.fromJsonArrayToFuncionarios(json)) {
            funcionarioService.saveFuncionario(funcionario);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> FuncionarioController.updateFromJson(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        Funcionario funcionario = Funcionario.fromJsonToFuncionario(json);
        if (funcionarioService.updateFuncionario(funcionario) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> FuncionarioController.updateFromJsonArray(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        for (Funcionario funcionario: Funcionario.fromJsonArrayToFuncionarios(json)) {
            if (funcionarioService.updateFuncionario(funcionario) == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> FuncionarioController.deleteFromJson(@PathVariable("id") Long id) {
        Funcionario funcionario = funcionarioService.findFuncionario(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (funcionario == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        funcionarioService.deleteFuncionario(funcionario);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByMesas", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> FuncionarioController.jsonFindFuncionariosByMesas(@RequestParam("mesas") Set<Mesa> mesas) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Funcionario.toJsonArray(Funcionario.findFuncionariosByMesas(mesas).getResultList()), headers, HttpStatus.OK);
    }
    
}
